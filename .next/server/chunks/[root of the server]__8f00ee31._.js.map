{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/ritij/Documents/Projects/ritij.dev/lib/spotify.ts"],"sourcesContent":["import querystring from \"querystring\";\n\nconst client_id = process.env.SPOTIFY_CLIENT_ID;\nconst client_secret = process.env.SPOTIFY_CLIENT_SECRET;\nconst refresh_token = process.env.SPOTIFY_REFRESH_TOKEN;\n\nconst basic = Buffer.from(`${client_id}:${client_secret}`).toString(\"base64\");\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst TOP_TRACKS_ENDPOINT = `https://api.spotify.com/v1/me/top/tracks?time_range=medium_term&limit=10`;\nconst TOP_ARTISTS_ENDPOINT = `https://api.spotify.com/v1/me/top/artists?time_range=medium_term&limit=10`;\n\nconst getAccessToken = async () => {\n  const response = await fetch(TOKEN_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Basic ${basic}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: querystring.stringify({\n      grant_type: \"refresh_token\",\n      refresh_token,\n    }),\n  });\n\n  return response.json();\n};\n\nexport const getNowPlaying = async () => {\n  const { access_token } = await getAccessToken();\n\n  return fetch(NOW_PLAYING_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n    },\n  });\n};\n\nexport const getTopTracks = async () => {\n  const { access_token } = await getAccessToken();\n\n  return fetch(TOP_TRACKS_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n    },\n  });\n};\n\nexport const getTopArtists = async () => {\n  const { access_token } = await getAccessToken();\n\n  return fetch(TOP_ARTISTS_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n    },\n  });\n};\n"],"names":[],"mappings":";;;;;AAAA;;AAEA,MAAM,YAAY,QAAQ,GAAG,CAAC,iBAAiB;AAC/C,MAAM,gBAAgB,QAAQ,GAAG,CAAC,qBAAqB;AACvD,MAAM,gBAAgB,QAAQ,GAAG,CAAC,qBAAqB;AAEvD,MAAM,QAAQ,OAAO,IAAI,CAAC,GAAG,UAAU,CAAC,EAAE,eAAe,EAAE,QAAQ,CAAC;AACpE,MAAM,iBAAiB,CAAC,sCAAsC,CAAC;AAC/D,MAAM,uBAAuB,CAAC,sDAAsD,CAAC;AACrF,MAAM,sBAAsB,CAAC,wEAAwE,CAAC;AACtG,MAAM,uBAAuB,CAAC,yEAAyE,CAAC;AAExG,MAAM,iBAAiB;IACrB,MAAM,WAAW,MAAM,MAAM,gBAAgB;QAC3C,QAAQ;QACR,SAAS;YACP,eAAe,CAAC,MAAM,EAAE,OAAO;YAC/B,gBAAgB;QAClB;QACA,MAAM,+GAAA,CAAA,UAAW,CAAC,SAAS,CAAC;YAC1B,YAAY;YACZ;QACF;IACF;IAEA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,gBAAgB;IAC3B,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM;IAE/B,OAAO,MAAM,sBAAsB;QACjC,SAAS;YACP,eAAe,CAAC,OAAO,EAAE,cAAc;QACzC;IACF;AACF;AAEO,MAAM,eAAe;IAC1B,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM;IAE/B,OAAO,MAAM,qBAAqB;QAChC,SAAS;YACP,eAAe,CAAC,OAAO,EAAE,cAAc;QACzC;IACF;AACF;AAEO,MAAM,gBAAgB;IAC3B,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM;IAE/B,OAAO,MAAM,sBAAsB;QACjC,SAAS;YACP,eAAe,CAAC,OAAO,EAAE,cAAc;QACzC;IACF;AACF","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///Users/ritij/Documents/Projects/ritij.dev/app/api/spotify/now-playing/route.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextResponse } from \"next/server\";\nimport { getNowPlaying } from \"@/lib/spotify\";\n\nexport async function GET() {\n  const response = await getNowPlaying();\n\n  if (!response.ok || response.status === 204) {\n    // If no content (204) or response not ok, return not playing\n    return NextResponse.json({ isPlaying: false }, { status: 200 });\n  }\n\n  // Check if the response body is empty\n  const text = await response.text();\n  if (!text) {\n    return NextResponse.json({ isPlaying: false }, { status: 200 });\n  }\n\n  const song = JSON.parse(text);\n\n  return NextResponse.json({\n    isPlaying: song.is_playing,\n    title: song.item?.name,\n    songUrl: song.item?.external_urls?.spotify,\n    album: song.item?.album?.name,\n    albumImageUrl: song.item?.album?.images?.[1]?.url,\n    artists: song.item?.artists?.map((artist: any) => ({\n      name: artist.name,\n      url: artist.external_urls.spotify,\n    })),\n  });\n}\n"],"names":[],"mappings":"AAAA,qDAAqD;;;AACrD;AACA;;;AAEO,eAAe;IACpB,MAAM,WAAW,MAAM,CAAA,GAAA,gHAAA,CAAA,gBAAa,AAAD;IAEnC,IAAI,CAAC,SAAS,EAAE,IAAI,SAAS,MAAM,KAAK,KAAK;QAC3C,6DAA6D;QAC7D,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,WAAW;QAAM,GAAG;YAAE,QAAQ;QAAI;IAC/D;IAEA,sCAAsC;IACtC,MAAM,OAAO,MAAM,SAAS,IAAI;IAChC,IAAI,CAAC,MAAM;QACT,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,WAAW;QAAM,GAAG;YAAE,QAAQ;QAAI;IAC/D;IAEA,MAAM,OAAO,KAAK,KAAK,CAAC;IAExB,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB,WAAW,KAAK,UAAU;QAC1B,OAAO,KAAK,IAAI,EAAE;QAClB,SAAS,KAAK,IAAI,EAAE,eAAe;QACnC,OAAO,KAAK,IAAI,EAAE,OAAO;QACzB,eAAe,KAAK,IAAI,EAAE,OAAO,QAAQ,CAAC,EAAE,EAAE;QAC9C,SAAS,KAAK,IAAI,EAAE,SAAS,IAAI,CAAC,SAAgB,CAAC;gBACjD,MAAM,OAAO,IAAI;gBACjB,KAAK,OAAO,aAAa,CAAC,OAAO;YACnC,CAAC;IACH;AACF","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}